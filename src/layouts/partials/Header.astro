---
import Logo from "@/components/Logo.astro";
import LangSwitcher from "@/layouts/components/LangSwitcher.astro";
import menu from "@/config/menu.json";
import menuI18n from "@/config/menu-i18n.json";
import { getLangFromUrl, useTranslations } from "@/i18n/utils";

export interface ChildNavigationLink {
  name: string;
  url: string;
  translationKey?: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  translationKey?: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

// Get current language and pathname
const { pathname } = Astro.url;
const lang = getLangFromUrl(Astro.url);

// Use language-specific menu
interface MenuItem {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: {name: string; url: string}[];
}

// Get language-specific menu with type safety
let menuItems: MenuItem[] = [];
if (lang in menuI18n) {
  const langMenu = menuI18n[lang as keyof typeof menuI18n];
  if (langMenu && 'main' in langMenu) {
    menuItems = langMenu.main as MenuItem[];
  }
} 

if (menuItems.length === 0) {
  // Fallback to standard menu
  menuItems = menu.main as MenuItem[];
}

// Get translations function
const t = useTranslations(lang);

console.log(`[HEADER-DEBUG] Current language: ${lang}, rendering Header with translations`);
console.log(`[HEADER-DEBUG] Menu items: ${JSON.stringify(menuItems.map(item => item.name))}`);
console.log(`[HEADER-DEBUG] Sample translated menu key 'nav.about': ${t('nav.about')}`);

// Function to get a language-specific URL
function getLocalizedUrl(path: string): string {
  // If the path already starts with the language code, return it as is
  if (path.startsWith(`/${lang}/`)) {
    return path;
  }
  
  // If path is just the root, add the language
  if (path === '/') {
    return `/${lang}`;
  }
  
  // Otherwise, add the language prefix
  return `/${lang}${path}`;
}
---

<header class="header">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
    >
      {
        menuItems.map((menuItem) => (
          <>
            {menuItem.hasChildren && menuItem.children ? (
              <li class="nav-item nav-dropdown group relative cursor-pointer dropdown-button">
                <span
                  class={`nav-link inline-flex items-center ${
                    menuItem.children?.map(({ url }) => getLocalizedUrl(url)).includes(pathname) ||
                    menuItem.children
                      ?.map(({ url }) => `${getLocalizedUrl(url)}/`)
                      .includes(pathname)
                      ? "active"
                      : ""
                  }`}
                >
                  {menuItem.name}
                  <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
                    <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                  </svg>
                </span>
                <ul
                  id="dropdown"
                  class="nav-dropdown-list mx-auto hidden duration-300 lg:invisible lg:absolute lg:block lg:h-auto lg:w-[13.5rem] lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100"
                >
                  {menuItem.children?.map((child) => (
                    <li class="nav-dropdown-item">
                      <a
                        href={getLocalizedUrl(child.url)}
                        class={`nav-dropdown-link block ${
                          (pathname === `${getLocalizedUrl(child.url)}/` ||
                            pathname === getLocalizedUrl(child.url)) &&
                          "text-primary"
                        }`}
                      >
                        {child.name}
                      </a>
                    </li>
                  ))}
                </ul>
              </li>
            ) : (
              <li class="nav-item">
                <a
                  href={getLocalizedUrl(menuItem.url)}
                  class={`nav-link inline-block lg:block ${
                    (pathname === `${getLocalizedUrl(menuItem.url)}/` || pathname === getLocalizedUrl(menuItem.url)) &&
                    "active"
                  }`}
                >
                  {menuItem.name}
                </a>
              </li>
            )}
          </>
        ))
      }
      
      <!-- Mobile Language Switcher -->
      <li class="nav-item lg:hidden">
        <LangSwitcher />
      </li>
     </ul>
     
     <!-- Desktop Language Switcher -->
     <div class="order-1 ml-auto hidden lg:order-2 lg:flex lg:items-center">
       <LangSwitcher />
     </div>
  </nav>
</header>

<script is:inline>
  document.addEventListener("astro:page-load", () => {
    document.querySelectorAll(".dropdown-button").forEach((button) => {
      button.addEventListener("click", (e) => {
        const dropdown = e.target.nextElementSibling;

        dropdown.classList.toggle("hidden");
      });
    });

    // Sticky header functionality
    const header = document.querySelector(".header");
    window.addEventListener("scroll", () => {
      if (window.scrollY > 0) {
        header.classList.add("header-sticky");
      } else {
        header.classList.remove("header-sticky");
      }
    });
  });
</script>
